version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name back-end-${CIRCLE_WORKFLOW_ID}

jobs:
  # Exercise: Infrastructure Creation
  # Exercise - Rollback
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy --template-file infrastructure/servers.yml --stack-name back-end-${CIRCLE_WORKFLOW_ID} --region us-east-1
      # Fail the job intentionally to simulate an error.
      # Uncomment the line below if you want to fail the current step
      # - run: return 1
      - destroy_environment

  listEC2IPs:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Create Cloudformation Stack
          command: |
            echo [all] > ~/inventory.txt && aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output text >> ~/inventory.txt
      - run:
          name: Display the inventory.txt value for test purpose
          command: cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt

  # Exercise: Config and Deployment
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['64:32:93:db:6a:cd:94:20:f5:68:1f:fc:9e:15:d1:cc'] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install Ansible
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Display the inventory.txt value for test purpose
          command: cat ~/workspace/inventory.txt
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i ~/workspace/inventory.txt ansible/playbook.yml

  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Display the inventory.txt value for test purpose
          command: grep -m 2 -o '.*' ~/workspace/inventory.txt | tail -n 1
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            grep -m 2 -o '.*' ~/workspace/inventory.txt | tail -n 1 | while read p; 
            do
              if curl -s --head "$p"
              then
                echo "Pass the smoke testing"
              else
                return 1
              fi
            done

      # - destroy_environment

  # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
  # Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file infrastructure/bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the new S3 bucket
      - run: aws s3 sync infrastructure/front-end/ s3://mybucket-${CIRCLE_WORKFLOW_ID} --delete

  # Exercise: Promote to Production - Job 3
  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`.
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file infrastructure/cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID}"

  # Exercise: Promote to Production - Job 2
  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation list-exports --query "Exports[?Name==\`PipelineID\`].Value" --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt
      - run:
          name: Displaying the contents of the textfile.txt at the workspace
          command: cat ~/textfile.txt

workflows:
  deploying:
    jobs:
      # - create_infrastructure
      # - listEC2IPs:
      #     requires:
      #       - create_infrastructure
      # - configure_infrastructure:
      #     requires:
      #       - listEC2IPs
      # - smoke_test:
      #     requires:
      #       - configure_infrastructure
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      # - get_last_deployment_id
      # - listEC2IPs
      # - smoke_test:
      #     requires:
      #       - listEC2IPs
